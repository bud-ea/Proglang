/*
    Массивы: статические и динамические.
    Статические - длина известна до запуска программы.
    Динамические - длина которых известна только после старта программы.
    
    *****Объявление массива

    **Статический: 
    <тип данных каждого элемента> <имя массива> [<количество элементов>];
    Происходит выделение непрерывного куска оперативной памяти 
    для размещения массива

    int arr[15];
    <имя массива> - в нем хранится указатель на первы бит куска памяти с массивом

    **Динамический:
    <тип данных каждого элемента>* <имя массива>;
    НЕ происходит выделение непрерывного куска оперативной памяти
    для размещения массива, а лишь создается указатель, 
    в котором этот адрес будет храниться

    int* arr;
    
    Нужно еще выделить память. А как? В какой момент?
    Как только становится понятно, сколько памяти нужно (пользователь ввел число).

    для выделения и освобождения памяти используют пару new - delete

    <имя массива> = new <тип данных одного элемента> [<количество элементов>]
    arr = new int[13];

    После использования динамического массива память нужно освободить. 
    Для статического массива память освобождается автоматически (как и выделяется).
    delete [] <имя массива = указатель на первый бит массива>

    delete[] arr;
 */

#include <iostream>

void input_mas(double *& arr, int &size)
{
    std::cout << "Input count";
    std::cin >> size;
    if (arr != nullptr)
        delete[] arr;
    arr = new double[size];

    std::cout << "Input elements: ";
    for (int i = 0; i < size; i++)
        std::cin >> arr[i];
    
}

void print_mas(const double* arr, int size)
{
    std::cout << "{";
    //arr[5] = 12; нельзя из-за const
    for (int i = 0; i < size; i++)
        std::cout << arr[i] << " ";
    std::cout << "}\n";
}

int main()
{
    int count = 0;
    double* nums = nullptr;
    input_mas(nums, count);
    std::cout << "count = " <<count<<"\n";
    print_mas(nums, count);
    delete[]nums;
    return 0;
}